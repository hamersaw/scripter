#!/bin/bash

version="0.1.3"
usage="usage $(basename $0) <COMMAND> [SUBCOMMAND] [ARGS...]
COMMANDS:
    help                                display this menu
    (init | initialize)                 initialize environment
    (mod | module) <SUBCOMMAND>         perform module operations
    (proc | process) <SUBCOMMAND>       perform process operations
    (repo | repository) <SUBCOMMAND>    perform repository operations
    (var | variable) <SUBCOMMAND>       perform variable operations
    version                             print application version"

modusage="usage $(basename $0) mod <SUBCOMMAND>
SUBCOMMANDS:
    help                    display this menu
    list                    display available modules
    run <module-name>       run the specified module
    run-bg <module-name>    run the specified module in the background
    show <module-name>      show information on the specified module"
modlistfmt="%-35s%-50s\n"
modlistdivlen=90

procusage="usage $(basename $0) proc <SUBCOMMAND>
SUBCOMMANDS:
    clear                   untrack all current processes
    help                    display this menu
    kill <process-id>       terminate the specified process
    list                    display all processes
    show <process-id>       show information on the specified process"
proclistfmt="%-15s%-30s%-23s%-5s\n"
proclistdivlen=75

repousage="usage $(basename $0) repo <SUBCOMMAND>
SUBCOMMANDS:
    add <name> <git-url>    add the specified repository with git url
    clear                   clear the list of registered repositories
    help                    display this menu
    list                    display all registered repositories
    remove <name>           reomte the specified repository
    update                  update modules by syncing repositories"
repolistfmt="%-15s%-35s\n"
repolistdivlen=60

varusage="usage $(basename $0) var <SUBCOMMAND>
SUBCOMMANDS:
    clear                   unset all variables
    get <name>              retrieve the value for a specified variable
    help                    display this menu
    list                    display all set variables
    set <name> <value>      set the value for a specified variable
    unset <name>            unset the value for a specified variable"
varlistfmt="%-30s%-30s\n"
varlistdivlen=60

# initialize helper functions
get_json() {
    echo ${1//\'/\"} | python3 -c "import sys, json; \
        print(json.load(sys.stdin)['$2'])" 2>/dev/null
}

get_json_keys() {
    echo ${1//\'/\"} | python3 -c "import sys, json; \
        print(*json.load(sys.stdin).keys())"
}

get_json_list() {
    echo ${1//\'/\"} | python3 -c "import sys, json; \
        print(json.load(sys.stdin)[$2])" 2>/dev/null
}

is_pid_running() {
    if ps -p $1 > /dev/null; then
        echo "true"
    else
        echo "false"
    fi
}

# initialize instance variables - set scripterdir if not already set
[ -z "$scripterdir" ] && scripterdir="$HOME/.local/share/scripter"

logdir="$scripterdir/log"
moddir="$scripterdir/modules"
procfile="$scripterdir/procfile"
repofile="$scripterdir/repofile"
varfile="$scripterdir/varfile"

# set environment variables for scripter libraries
projectdir="$(pwd)/$(dirname $0)"
export scripterlibsh="$projectdir/scripter-libsh.sh"

# execute command
case "$1" in
    help)
        echo "$usage"
        ;;
    init|initialize)
        # create scripter directories
        [ ! -d $scripterdir ] && mkdir $scripterdir
        [ ! -d $logdir ] && mkdir $logdir
        [ ! -d $moddir ] && mkdir $moddir
        [ ! -f $procfile ] && touch $procfile
        [ ! -f $repofile ] && touch $repofile
        [ ! -f $varfile ] && touch $varfile
        ;;
    mod|module) # execute mod command
        shift # remove first argument
        case "$1" in
            help)
                echo "$modusage"
                ;;
            list)
                printf "$modlistfmt" "name" "description"
                printf "%.0s-" $(seq 1 $modlistdivlen); printf "\n"

                for configfile in $(ls $moddir/*/config.js); do
                    # retrieve modules list for this repository
                    json=$(cat $configfile)
                    keys=$(get_json_keys "$json")
                    modules=($keys)

                    # compute repository name
                    reponame=${configfile/$moddir/} # strip moddir
                    reponame=${reponame/config.js/} # strip 'config.js'
                    reponame="${reponame:1:${#reponame}-2}" # strip /'s

                    # iterate over modules
                    for module in ${modules[@]}; do
                        modulejson=$(get_json "$json" "$module")
                        description=$(get_json "$modulejson" "description")

                        printf "$modlistfmt" "$reponame/$module" "$description"
                    done
                done
                ;;
            run)
                # check argument length
                (( $# != 2 )) && \
                    echo "'run' requires one argument" && exit 1

                # set foreground to true
                foreground="true"
                ;&
            run-bg)
                # check argument length
                (( $# != 2 )) && \
                    echo "'run-bg' requires one argument" && exit 1

                # if unset -> set foreground to false
                [ -z "$foreground" ] && foreground="false"

                # compute reponame and scriptname
                reponame=$(echo "$2" | cut -f 1 -d "/")
                scriptname=${2/$reponame/} # strip reponame
                scriptname="${scriptname:1:${#scriptname}-1}" # strip leading /

                # check if module exists
                json=$(cat $moddir/$reponame/config.js)
                modulejson=$(get_json "$json" "$scriptname")
                [ -z "$modulejson" ] && \
                    echo "module '$2' does not exist" && exit 1

                # populate options 
                optionS=$(get_json "$modulejson" "options")
                count=0
                optionstring=""
                for (( ; ; )); do
                    # get next option in list
                    option=$(get_json_list "$optionS" "$count")
                    if [ $? -eq 0 ]; then
                        name=$(get_json "$option" "name")
                        required=$(get_json "$option" "required")

                        # retrieve value from variable store
                        value=$($0 var get $name)
                        [ -z $value ] && [ $required = "true" ] && \
                            echo "required variable '$name' is not set" && exit 1

                        # append to optionstring
                        if [ -z "$optionstring" ]; then
                            optionstring="$name=$value"
                        else
                            optionstring="$optionstring $name=$value"
                        fi
                    else
                        break
                    fi

                    (( count += 1 ))
                done

                # execute module
                modulefile="$moddir/$2"
                case $foreground in
                    true)
                        $modulefile "$optionstring"
                        ;;
                    false)
                        # execute in background
                        pid="$RANDOM"
                        $modulefile "$optionstring" \
                            >$logdir/$pid.log 2>&1 &

                        echo "$pid $! $(date +%Y.%m.%d-%H:%M:%S) $2 \"$optionstring\"" \
                            >> $procfile
                        echo "executed process with pid $pid"
                        ;;
                esac
                ;;
            show)
                # check argument length
                (( $# != 2 )) && \
                    echo "'show' requires one argument" && exit 1

                # compute reponame and scriptname
                reponame=$(echo "$2" | cut -f 1 -d "/")
                scriptname=${2/$reponame/} # strip reponame
                scriptname="${scriptname:1:${#scriptname}-1}" # strip leading /

                # check if module exists
                json=$(cat $moddir/$reponame/config.js)
                modulejson=$(get_json "$json" "$scriptname")
                [ -z "$modulejson" ] \
                    && echo "module '$2' does not exist" && exit 1

                # print module
                echo ${modulejson//\'/\"}
                ;;
            *)
                printf "$usage\n"
                exit 1
                ;;
        esac
        ;;
    proc|process) # execute proc command
        shift # remove first argument
        case "$1" in
            clear)
                cat /dev/null > $procfile
                rm $logdir/*
                ;;
            help)
                echo "$procusage"
                ;;
            kill)
                # check argument length
                (( $# != 2 )) && \
                    echo "'kill' requires one argument" && exit 1

                # kill process
                cat $procfile | grep "^$2 " \
                    | awk '{print $2}' | xargs kill
                ;;
            list)
                printf "$proclistfmt" "pid" "name" "timestamp" "running"
                printf "%.0s-" $(seq 1 $proclistdivlen); printf "\n"

                # iterate over procfile
                while read LINE; do
                    array=($LINE)
                    running=$(is_pid_running ${array[1]})
                    printf "$proclistfmt" "${array[0]}" \
                        "${array[3]}" "${array[2]}" "$running"
                done < $procfile
                ;;
            show)
                LINE=$(cat $procfile | grep "^$2 ")
                if [ ! -z "$LINE" ]; then
                    array=($LINE)
                    running=$(is_pid_running ${array[1]})

                    echo "{ \"pid\" : \"${array[0]}\", \"ospid\" : \"${array[1]}\", \"name\" : \"${array[3]}\", \"timestamp\" : \"${array[2]}\", \"running\" : \"$running\", \"options\" : ${array[4]} }"
                fi
                ;;
            *)
                echo "$procusage"
                exit 1
                ;;
        esac
        ;;
    repo|repository) # execute repo command
        shift # remove first argument
        case "$1" in
            add)
                # check argument length
                (( $# != 3 )) && \
                    echo "'add' requires one argument" && exit 1

                # check if 'name' already exists
                cat $repofile | grep -q "^$2 " && \
                    echo "repository '$2' already exists" && exit 1

                # add 'name' and 'url' to repofile
                echo "$2 $3" >> $repofile
                sort -o $repofile $repofile
                ;;
            clear)
                cat /dev/null > $repofile
                ;;
            help)
                echo "$repousage"
                ;;
            list)
                printf "$repolistfmt" "name" "url"
                printf "%.0s-" $(seq 1 $repolistdivlen); printf "\n"
                cat $repofile | awk -v fmt="$repolistfmt" \
                    '{printf fmt, $1, $2}'
                ;;
            remove)
                # check argument length
                (( $# != 2 )) && \
                    echo "'remove' requires one argument" && exit 1

                # remove 'name' from repofile
                sed -i "/^$3/d" $repofile
                ;;
            update)
                # iterate over repofile
                while read LINE; do
                    array=($LINE)
                    repodir="$moddir/${array[0]}"

                    if [ -d "$repodir" ]; then
                        # repo exists -> git pull
                        PWD=$(pwd)
                        cd "$repodir"
                        git pull > /dev/null
                        cd "$PWD"
                    else
                        # repo does not exist -> git clone
                        git clone "${array[1]}" "$repodir" > /dev/null
                    fi
                done < $repofile
                ;;
            *)
                echo "$repousage"
                exit 1
                ;;
        esac
        ;;
    var|variable) # execute var command
        shift # remove first argument
        case "$1" in
            clear)
                cat /dev/null > $varfile
                ;;
            get)
                # check argument length
                (( $# != 2 )) && \
                    echo "'getcommand requires one argument" && exit 1

                # retrieve variable value if exists
                cat $varfile | grep "^$2 " | awk '{print $2}'
                ;;
            help)
                echo "$varusage"
                ;;
            list)
                printf "$varlistfmt" "name" "value"
                printf "%.0s-" $(seq 1 $varlistdivlen); printf "\n"
                cat $varfile | awk -v fmt="$varlistfmt" \
                    '{printf fmt, $1, $2}'
                ;;
            set)
                # check argument length
                (( $# != 3 )) && \
                    echo "'set' requires two arguments" && exit 1

                # check if 'variable' already exists
                cat $varfile | grep -q "^$2 " && \
                    echo "variable '$2' already exists" && exit 1

                # add 'variable' and 'value' to varfile
                echo "$2 $3" >> $varfile
                sort -o $varfile $varfile
                ;;
            unset)
                # check argument length
                (( $# != 2 )) && \
                    echo "'unset' requires one argument" && exit 1

                # remove 'variable' from varfile
                sed -i "/^$2/d" $varfile
                ;;
            *)
                echo "$varusage"
                exit 1
                ;;
        esac
        ;;
    version)
        echo "v$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
